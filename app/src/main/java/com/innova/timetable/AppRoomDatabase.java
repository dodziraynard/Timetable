package com.innova.timetable;import android.content.Context;import androidx.annotation.NonNull;import androidx.room.Database;import androidx.room.Room;import androidx.room.RoomDatabase;import androidx.sqlite.db.SupportSQLiteDatabase;import com.innova.timetable.dao.LessonDao;import com.innova.timetable.dao.TaskDao;import com.innova.timetable.models.Lesson;import com.innova.timetable.models.Task;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import static com.innova.timetable.utils.DummyData.getDummyLessons;import static com.innova.timetable.utils.DummyData.getDummyTasks;@Database(entities = {Lesson.class, Task.class}, version = 1, exportSchema = false)public abstract class AppRoomDatabase extends RoomDatabase {    public static final String TIMETABLE_DATABASE = "timetable_database";    private static final String TAG = "AppRoomDatabase";    private static final int NUMBER_OF_THREADS = 4;    public static final ExecutorService databaseWriteExecutor =            Executors.newFixedThreadPool(NUMBER_OF_THREADS);    private static volatile AppRoomDatabase INSTANCE;    private static Callback sRoomDatabaseCallback = new Callback() {        @Override        public void onCreate(@NonNull SupportSQLiteDatabase db) {            super.onOpen(db);            if (!BuildConfig.DEBUG) return;            databaseWriteExecutor.execute(() -> {                LessonDao lessonDao = INSTANCE.LessonDao();                TaskDao taskDao = INSTANCE.TaskDao();                lessonDao.deleteAll();                taskDao.deleteAll();                List<Lesson> lessons = getDummyLessons();                for (Lesson task : lessons) {                    lessonDao.insertLesson(task);                }                for (Task task : getDummyTasks()) {                    taskDao.insertTask(task);                }            });        }    };    private static volatile Context mContext;    public static AppRoomDatabase getDatabase(final Context context) {        mContext = context;        if (INSTANCE == null) {            synchronized (AppRoomDatabase.class) {                if (INSTANCE == null) {                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),                            AppRoomDatabase.class, TIMETABLE_DATABASE)                            .addCallback(sRoomDatabaseCallback)                            .fallbackToDestructiveMigration()                            .build();                }            }        }        return INSTANCE;    }    public abstract LessonDao LessonDao();    public abstract TaskDao TaskDao();}